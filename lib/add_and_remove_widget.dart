
import 'package:flutter/material.dart';
import 'dart:math' as math;


enum _Widget {
  backgroundImage,
  cardsList,
}

// üîµ –≠–∫—Ä–∞–Ω —Ä–∞–∑–¥–µ–ª–µ–Ω –ø–æ–ø–æ–ª–∞–º, –≤–µ—Ä—Ö–Ω—è—è —á–∞—Å—Ç—å –ª–∏–±–æ –∑–∞–∫—Ä–∞—à–µ–Ω–∞, –ª–∏–±–æ —Ç–∞–º –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –∫–∞—Ä—Ç–∏–Ω–∫–∞, –∫–∞–∫ –Ω–∞ —Å–∫—Ä–∏–Ω–∫–∞—Å—Ç–µ.
// üîµ –ù–∞ —ç–∫—Ä–∞–Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è —Å–ø–∏—Å–æ–∫ –∫–∞—Ä—Ç–æ—á–µ–∫ —Å –∑–∞–≥–æ–ª–æ–≤–∫–æ–º, –∫–æ—Ç–æ—Ä—ã–π –∏–∑–Ω–∞—á–∞–ª—å–Ω–æ –Ω–µ–º–Ω–æ–≥–æ –ø–µ—Ä–µ–∫—Ä—ã–≤–∞–µ—Ç –≤–µ—Ä—Ö–Ω—é—é –ø–æ–ª–æ–≤–∏–Ω—É.
// üîµ –ï—Å—Ç—å –∫–Ω–æ–ø–∫–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è / —É–¥–∞–ª–µ–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Å–ø–∏—Å–∫–∞, –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞—Ä—Ç–æ—á–µ–∫ ‚Äî –æ–¥–Ω–∞.
// üîµ –ö–æ–≥–¥–∞ —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç–∏–≥–∞–µ—Ç –Ω–∏–∑–∞ —ç–∫—Ä–∞–Ω–∞, –æ–Ω –Ω–∞—á–∏–Ω–∞–µ—Ç —Ä–∞—Å—Ç–∏ –≤–≤–µ—Ä—Ö –∏ –≤—Å–µ –±–æ–ª—å—à–µ –ø–µ—Ä–µ–∫—Ä—ã–≤–∞–µ—Ç –≤–µ—Ä—Ö–Ω—é—é –ø–æ–ª–æ–≤–∏–Ω—É —ç–∫—Ä–∞–Ω–∞, –Ω–æ –Ω–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é.
// üîµ –ö–æ–≥–¥–∞ —Å–ø–∏—Å–æ–∫ —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –≤—ã—Å–æ—Ç—ã, –µ–≥–æ —ç–ª–µ–º–µ–Ω—Ç—ã —Å–∫—Ä–æ–ª–ª—è—Ç—Å—è –≤–Ω—É—Ç—Ä–∏.
// üîµ –ì–ª–∞–≤–Ω–æ–µ ‚Äî –∞–¥–∞–ø—Ç–∏–≤–Ω–æ—Å—Ç—å —Å–ø–∏—Å–∫–∞. –ê–Ω–∏–º–∞—Ü–∏—è, —Ä–∞–Ω–¥–æ–º–Ω—ã–µ –∏–∫–æ–Ω–∫–∏ –∏ –ø—Ä–æ—á–µ–µ ‚Äî –¥–ª—è —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏—è.
// üîµ –í—Å—ë –¥–æ–ª–∂–Ω–æ –∑–∞–ø—É—Å–∫–∞—Ç—å—Å—è –≤ DartPad.

/// –í–∏–¥–∂–µ—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–∑–≤–æ–ª—è–µ—Ç –¥–æ–±–∞–≤–ª—è—Ç—å –∏ —É–¥–∞–ª—è—Ç—å —ç–ª–µ–º–µ–Ω—Ç—ã —Å–ø–∏—Å–∫–∞
/// –ø—Ä–∏ —ç—Ç–æ –≤–∏–∑–∞–ª—å–Ω–æ —Å–ø–∏–æ—Å–∫ –ª–∏–±–æ —Ä–∞—Å—Ç–µ—Ç –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —ç–ª–µ–º–µ–Ω—Ç–æ–≤ (–¥–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è)
/// –ª–∏–±–æ —É–º–µ–Ω—å—à–∞–µ—Ç—Å—è –¥–æ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è
class MultiChildExample extends StatefulWidget {
  const MultiChildExample({super.key});

  @override
  State<MultiChildExample> createState() => _MultiChildExampleState();
}

class _MultiChildExampleState extends State<MultiChildExample> {
  final _listKey = GlobalKey<AnimatedListState>();
  final _duration = const Duration(milliseconds: 200);
  final _cards = <_Card>[];

  @override
  void initState() {
    super.initState();
    _cards.addAll([for (var i = 0; i < 3; i++) _getCard(i)]);
  }

  _Card _getCard(int index) {
    final iconCodePoint = 58000 + math.Random().nextInt(1000);
    return _Card(index: index, iconCodePoint: iconCodePoint);
  }

  void _addItem() {
    final nextIndex = _cards.length;
    final newCard = _getCard(nextIndex);
    _cards.insert(nextIndex, newCard);
    _listKey.currentState!.insertItem(
      nextIndex,
      duration: _duration,
    );
  }

  void _removeItem() {
    if (_cards.length <= 2) return;

    final lastIndex = _cards.length - 1;
    final lastCard = _cards[lastIndex];
    _listKey.currentState!.removeItem(
      lastIndex,
      duration: _duration,
          (_, animation) => SizeTransition(
        sizeFactor: animation,
        child: lastCard,
      ),
    );
    _cards.removeAt(lastIndex);
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      body: CustomMultiChildLayout(
        delegate: _MultiChildExampleDelegate(
          minOverlap: 0.1,
          maxOverlap: 0.7,
        ),
        children: [
          LayoutId(
            id: _Widget.backgroundImage,
            child: const ColoredBox(color: Colors.redAccent),
          ),
          LayoutId(
            id: _Widget.cardsList,
            child: Padding(
              padding: const EdgeInsets.all(16),
              child: DecoratedBox(
                decoration: BoxDecoration(
                  color: Colors.greenAccent.withOpacity(0.9),
                  borderRadius: BorderRadius.circular(16),
                ),
                child: AnimatedList(
                  key: _listKey,
                  padding: const EdgeInsets.all(16),
                  primary: false,
                  shrinkWrap: true,
                  initialItemCount: _cards.length,
                  itemBuilder: (_, index, animation) => SizeTransition(
                    sizeFactor: animation,
                    child: _cards[index],
                  ),
                ),
              ),
            ),
          ),
        ],
      ),
      floatingActionButton: Padding(
        padding: const EdgeInsets.all(16),
        child: Column(
          mainAxisSize: MainAxisSize.min,
          children: [
            FloatingActionButton(
              backgroundColor: Colors.yellow,
              onPressed: () => _addItem(),
              child: const Icon(Icons.add),
            ),
            const SizedBox(height: 16),
            FloatingActionButton(
              backgroundColor: Colors.yellow,
              onPressed: () => _removeItem(),
              child: const Icon(Icons.remove),
            ),
          ],
        ),
      ),
    );
  }
}

class _Card extends StatelessWidget {
  final int index;
  final int iconCodePoint;

  const _Card({required this.index, required this.iconCodePoint});

  @override
  Widget build(BuildContext context) {
    final card = index == 0
        ? const Center(
      child: Text(
        'Surf UI Quiz #1',
        style: TextStyle(fontSize: 20, fontWeight: FontWeight.bold),
      ),
    )
        : Row(
      mainAxisAlignment: MainAxisAlignment.spaceBetween,
      children: [
        Text('Card $index'),
        index == 1
            ? const Icon(Icons.flutter_dash)
            : Icon(IconData(iconCodePoint, fontFamily: 'MaterialIcons')),
      ],
    );

    return SizedBox(
      height: 40,
      child: Center(child: card),
    );
  }
}

class _MultiChildExampleDelegate extends MultiChildLayoutDelegate {
  /// –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ –ø–µ—Ä–µ–∫—Ä—ã—Ç–∏—è –≤–∏–¥–∂–µ—Ç–∞ —Ñ–æ–Ω–∞ –≤–∏–¥–∂–µ—Ç–æ–º —Å–ø–∏—Å–∫–∞.
  final double minOverlap;

  /// –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –ø–µ—Ä–µ–∫—Ä—ã—Ç–∏—è –≤–∏–¥–∂–µ—Ç–∞ —Ñ–æ–Ω–∞ –≤–∏–¥–∂–µ—Ç–æ–º —Å–ø–∏—Å–∫–∞.
  final double maxOverlap;

  _MultiChildExampleDelegate({
    required this.minOverlap,
    required this.maxOverlap,
  })  : assert(minOverlap >= 0.0 && minOverlap <= 1.0),
        assert(maxOverlap >= 0.0 && maxOverlap <= 1.0),
        assert(minOverlap < maxOverlap);

  @override
  void performLayout(Size size) {
    // –ó–∞–¥–∞–µ–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –¥–ª—è –≤–∏–¥–∂–µ—Ç–∞ —Ñ–æ–Ω–∞.
    // –í—ã—Å–æ—Ç–∞ —Ä–∞–≤–Ω–∞ –ø–æ–ª–æ–≤–∏–Ω–µ –¥–æ—Å—Ç—É–ø–Ω–æ–π –æ—Ç —Ä–æ–¥–∏—Ç–µ–ª—è –≤—ã—Å–æ—Ç—ã, –≤ –Ω–∞—à–µ–º —Å–ª—É—á–∞–µ –ø–æ–ª–æ–≤–∏–Ω–µ –≤—ã—Å–æ—Ç—ã –≤—Å–µ–≥–æ —ç–∫—Ä–∞–Ω–∞.
    final backgroundImageMaxHeight = size.height / 2;
    final backgroundImageSize = Size(size.width, backgroundImageMaxHeight);
    layoutChild(
      _Widget.backgroundImage,
      BoxConstraints.tight(backgroundImageSize),
    );

    // –ó–∞–¥–∞–µ–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –¥–ª—è –≤–∏–¥–∂–µ—Ç–∞ —Å–ø–∏—Å–∫–∞.
    // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –≤—ã—Å–æ—Ç–∞ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –ø–µ—Ä–µ–∫—Ä—ã—Ç–∏—è –≤–∏–¥–∂–µ—Ç–∞ —Ñ–æ–Ω–∞.
    final cardsListSize = Size(
      size.width,
      backgroundImageMaxHeight * (1 + maxOverlap),
    );
    final cardsListLayout = layoutChild(
      _Widget.cardsList,
      BoxConstraints.loose(cardsListSize),
    );

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–º–µ—â–µ–Ω–∏–µ –≤–∏–¥–∂–µ—Ç–∞ —Å–ø–∏—Å–∫–∞.
    // –¢—É—Ç –º—ã —Å–º–æ—Ç—Ä–∏–º –Ω–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –º–µ–∂–¥—É –¥–≤—É—Ö –≤–µ–ª–∏—á–∏–Ω:
    // - offsetDependsOnMinOverlap ‚Äî —ç—Ç–æ —Å–º–µ—â–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ
    // –ø–µ—Ä–µ–∫—Ä—ã—Ç–∏—è –∏ –æ–Ω–æ –±—É–¥–µ—Ç –º–µ–Ω—å—à–µ, –∫–æ–≥–¥–∞ —Å–ø–∏—Å–æ–∫ –º–∞–ª–µ–Ω—å–∫–∏–π.
    // - offsetDependsOnCardListHeight ‚Äî —ç—Ç–æ —Å–º–µ—â–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –≤—ã—Å–æ—Ç—ã —Å–ø–∏—Å–∫–∞ –∏ –æ–Ω–æ
    // –±—É–¥–µ—Ç –º–µ–Ω—å—à–µ, –∫–æ–≥–¥–∞ —Å–ø–∏—Å–æ–∫ –±—É–¥–µ—Ç —Ä–∞—Å—Ç–∏.
    //
    // –¢.–µ. –ø–æ–≤–µ–¥–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ (—Ä–∞—Å—Ç–µ—Ç –≤–≤–µ—Ä—Ö –∏–ª–∏ –≤–Ω–∏–∑) –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è –ø–µ—Ä–µ—Å—á–µ—Ç–æ–º –∏ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ–º —É–∫–∞–∑–∞–Ω–Ω—ã—Ö
    // –≤–µ–ª–∏—á–∏–Ω.
    final offsetDependsOnMinOverlap = backgroundImageMaxHeight * (1 - minOverlap);
    final offsetDependsOnCardListHeight = size.height - cardsListLayout.height;
    positionChild(
      _Widget.cardsList,
      Offset(
        0,
        math.min(offsetDependsOnMinOverlap, offsetDependsOnCardListHeight),
      ),
    );
  }

  @override
  bool shouldRelayout(covariant _MultiChildExampleDelegate oldDelegate) {
    return oldDelegate.minOverlap != minOverlap || oldDelegate.maxOverlap != maxOverlap;
  }
}
